# D:\VSCode\advanced-roleplay-engine\backend\alembic\versions\26589f75c33f_remove_dummy_pk_from_user_settings.py

"""remove dummy_pk from user_settings

Revision ID: 26589f75c33f
Revises: 1bdb698a829a # <-- Verifique se 'Revises' aponta para a migração anterior correta
Create Date: <Data de Criação>

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '26589f75c33f'
down_revision: Union[str, None] = '1bdb698a829a' # <-- Verifique este ID
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Substitua op.drop_column por batch_alter_table
    with op.batch_alter_table('user_settings', schema=None) as batch_op:
        # Remove a coluna dummy_pk
        batch_op.drop_column('dummy_pk')
        # Opcional: Se 'id' não era PK antes, certifique-se que se torne PK agora.
        # Se 'id' já era parte da PK composta com dummy_pk, remover dummy_pk
        # pode ser suficiente. Se 'id' não era PK, você precisaria recriar
        # a constraint. Verificar a migração anterior (1bdb...) pode ajudar.
        # Assumindo que 'id' se tornará a única PK:
        # (Pode não ser necessário se o SQLAlchemy/Alembic lidar com isso ao remover a outra parte da PK)
        # Exemplo de como recriar (pode precisar ajustar nomes de constraint):
        # batch_op.drop_constraint('nome_da_pk_antiga', type_='primary') # Se souber o nome
        # batch_op.create_primary_key('pk_user_settings', ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Para reverter, precisamos adicionar a coluna dummy_pk de volta
    # E potencialmente recriar a chave primária composta (se era composta)
    with op.batch_alter_table('user_settings', schema=None) as batch_op:
        # Adiciona a coluna de volta. Precisamos saber o tipo (Integer)
        # e se era NOT NULL. Como era PK, era implicitamente NOT NULL.
        # O valor default 1 pode ser necessário para linhas existentes.
        batch_op.add_column(sa.Column('dummy_pk', sa.INTEGER(), nullable=False, server_default=sa.text("'1'")))

        # Se a PK era composta (id, dummy_pk), recrie-a.
        # Se dummy_pk era a ÚNICA PK, recrie-a.
        # (Ajuste conforme necessário baseado na estrutura original)
        # Exemplo se dummy_pk era a ÚNICA PK:
        # batch_op.drop_constraint('pk_user_settings', type_='primary') # Remove a PK só com 'id'
        # batch_op.create_primary_key('nome_da_pk_original', ['dummy_pk'])

    # ### end Alembic commands ###