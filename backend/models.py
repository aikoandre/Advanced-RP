# backend-python/models.py
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid # For generating unique IDs

def generate_id():
    return str(uuid.uuid4())

class GlobalLoreEntry(BaseModel):
    id: str = Field(default_factory=generate_id)
    title: str
    content: str # Long text for the lore content
    tags: List[str] = []

class CharacterCard(BaseModel):
    id: str = Field(default_factory=generate_id)
    character_name: str
    # Simplified: personality, backstory, abilities, GM notes all go here
    character_description: str
    dialogue_examples: List[str] = []
    # Used if this character is the GM/initiator of the roleplay
    beginning_message: Optional[str] = None
    # Optional: List of GlobalLoreEntry IDs or tags relevant to this character
    world_lore_references: List[str] = []
    # For user characters, this might store their specific lore or session notes
    # For GM/NPCs, could be internal notes for the AI
    # For MVP, can be simpler or just part of character_description

class ScenarioCard(BaseModel):
    id: str = Field(default_factory=generate_id)
    scenario_name: str
    # Simplified: world description, rules, tone, protagonist focus, GM AI guidelines
    scenario_description: str
    beginning_message: str # Initial message when starting a new chat in this scenario
    # Optional: List of GlobalLoreEntry IDs or tags crucial for this scenario
    world_lore_references: List[str] = []

class UserSettings(BaseModel):
    openrouter_api_key: Optional[str] = None
    selected_llm_model: Optional[str] = "google/gemini-flash-1.5" # Default example
    # For future use:
    # global_output_formatting_rules: Optional[Dict[str, Any]] = None
    # time_system_enabled: bool = False

# For chat API
class ChatInput(BaseModel):
    chat_id: str # Will be generated by backend for new chats, sent by frontend for existing
    user_input: str
    # Optional: Frontend can send current scene info if user manually sets it
    current_scene_time: Optional[str] = None
    current_scene_location: Optional[str] = None
    current_scene_context: Optional[str] = None


class ChatResponse(BaseModel):
    ai_response: str
    chat_id: str # Always return chat_id for frontend to keep track

# For creating a new chat session
class NewChatRequest(BaseModel):
    scenario_id: Optional[str] = None       # ID if starting with a ScenarioCard
    gm_character_id: Optional[str] = None # ID if starting with a CharacterCard as GM
    user_character_id: str                # ID of the user's CharacterCard

class NewChatResponse(BaseModel):
    chat_id: str
    beginning_message: str